library(shiny)

ui <- fluidPage(
  tags$head(
    tags$script(
      HTML(
        "
        $(document).on('keydown', function(e) {
          if (e.ctrlKey && e.which === 90) {  // 90 is the key code for 'Z'
            Shiny.onInputChange('undoButton', Math.random());
          }
        });
        "
      )
    )
  ),
  fluidRow(
    rHandsontableOutput("hot"),
    actionButton("undoButton", "Undo")
  )
)

server <- function(input, output) {
  output$hot <- renderRHandsontable({
    # Your rHandsontable logic here
    rhandsontable(data = data.frame(A = c(1, 2, 3), B = c(4, 5, 6)))
  })

  observeEvent(input$undoButton, {
    # Your undo logic here
    cat("Undo button pressed!\n")
  })
}

shinyApp(ui, server)





library(shiny)

ui <- fluidPage(
  tags$head(
    tags$script(
      HTML(
        "
        var dataHistory = [];
        
        $(document).on('keydown', function(e) {
          if (e.ctrlKey && e.which === 90) {  // 90 is the key code for 'Z'
            if (dataHistory.length > 1) {
              dataHistory.pop(); // Remove current state
              var previousState = dataHistory.pop(); // Get previous state
              Shiny.setInputValue('undoButton', previousState, {priority: 'event'});
            }
          }
        });
        "
      )
    )
  ),
  fluidRow(
    rHandsontableOutput("hot"),
    actionButton("undoButton", "Undo")
  )
)

server <- function(input, output, session) {
  data <- reactiveVal(data.frame(A = c(1, 2, 3), B = c(4, 5, 6)))

  observeEvent(input$undoButton, {
    dataHistory <- isolate(dataHistory)
    if (length(dataHistory) > 1) {
      data(dataHistory[[length(dataHistory) - 1]])
      dataHistory <- dataHistory[1:(length(dataHistory) - 1)]
    }
  })

  output$hot <- renderRHandsontable({
    dataHistory <- isolate(dataHistory)
    dataHistory <- c(dataHistory, list(data()))
    rhandsontable(data())
  })
}

shinyApp(ui, server)




library(shiny)

ui <- fluidPage(
  tags$head(
    tags$script(
      HTML(
        "
        var dataHistory = [];
        
        $(document).on('keydown', function(e) {
          if (e.ctrlKey && e.which === 90) {  // 90 is the key code for 'Z'
            if (dataHistory.length > 1) {
              dataHistory.pop(); // Remove current state
              var previousState = dataHistory.pop(); // Get previous state
              Shiny.setInputValue('undoButton', previousState, {priority: 'event'});
            }
          }
        });
        "
      )
    )
  ),
  fluidRow(
    rHandsontableOutput("hot"),
    actionButton("undoButton", "Undo")
  )
)

server <- function(input, output, session) {
  dataHistory <- reactiveVal(list(data.frame(A = c(1, 2, 3), B = c(4, 5, 6))))

  observeEvent(input$undoButton, {
    currentData <- isolate(dataHistory()[length(dataHistory())])
    if (length(dataHistory()) > 1) {
      dataHistory(dataHistory()[1:(length(dataHistory()) - 1)])
      updateHotOutput(session, "hot")
    }
  })

  output$hot <- renderRHandsontable({
    dataHistory <- isolate(dataHistory())
    rhandsontable(dataHistory()[length(dataHistory())])
  })
}

shinyApp(ui, server)


library(shiny)

ui <- fluidPage(
  fluidRow(
    rHandsontableOutput("hot"),
    actionButton("undoButton", "Undo (CTRL+Z)")
  )
)

server <- function(input, output) {
  output$hot <- renderRHandsontable({
    rhandsontable(data.frame(A = c(1, 2, 3), B = c(4, 5, 6)))
  })

  observeEvent(input$undoButton, {
    # Simulate CTRL+Z functionality
    session$sendCustomMessage(type = "keypress", key = "z", ctrlKey = TRUE)
  })
}

shinyApp(ui, server)




library(shiny)

ui <- fluidPage(
  tags$head(
    tags$script(
      HTML(
        "
        $(document).ready(function() {
          $('#undoButton').click(function() {
            var e = jQuery.Event('keydown');
            e.which = 90;  // 90 is the key code for 'Z'
            e.ctrlKey = true;
            $(document).trigger(e);
          });
        });
        "
      )
    )
  ),
  fluidRow(
    rHandsontableOutput("hot"),
    actionButton("undoButton", "Undo (CTRL+Z)")
  )
)

server <- function(input, output) {
  output$hot <- renderRHandsontable({
    rhandsontable(data.frame(A = c(1, 2, 3), B = c(4, 5, 6)))
  })
}

shinyApp(ui, server)


library(shiny)
library(rhandsontable)

ui <- fluidPage(
  tags$head(
    tags$script(
      HTML(
        "
        $(document).ready(function() {
          $('#undoButton').click(function() {
            var hot = $('#hot').handsontable('getInstance');
            hot.undo();
          });
        });
        "
      )
    )
  ),
  fluidRow(
    rHandsontableOutput("hot"),
    actionButton("undoButton", "Undo (CTRL+Z)")
  )
)

server <- function(input, output) {
  output$hot <- renderRHandsontable({
    rhandsontable(data.frame(A = c(1, 2, 3), B = c(4, 5, 6)))
  })
}

shinyApp(ui, server)



library(shiny)
library(rhandsontable)

ui <- fluidPage(
  useShinyjs(),  # Include ShinyJS
  fluidRow(
    rHandsontableOutput("hot"),
    actionButton("undoButton", "Undo (CTRL+Z)")
  )
)

server <- function(input, output, session) {
  output$hot <- renderRHandsontable({
    rhandsontable(data.frame(A = c(1, 2, 3), B = c(4, 5, 6)))
  })

  # Activate ShinyJS
  shinyjs::enable()

  # Trigger CTRL+Z event on button click
  observeEvent(input$undoButton, {
    shinyjs::runjs('
      var e = new jQuery.Event("keydown");
      e.which = 90;  // 90 is the key code for "Z"
      e.ctrlKey = true;
      $(document).trigger(e);
    ')
  })
}

shinyApp(ui, server)



library(shiny)
library(rhandsontable)

ui <- fluidPage(
  rHandsontableOutput("hot"),
  actionButton("undoBtn", "Undo"),
  actionButton("redoBtn", "Redo")
)

server <- function(input, output, session) {
  # Sample data
  data <- data.frame(
    ID = c(1, 2, 3),
    Name = c("John", "Jane", "Doe"),
    Value = c(10, 20, 30)
  )

  output$hot <- renderRHandsontable({
    rhandsontable(data) %>%
      hot_context_menu(undo = TRUE, redo = TRUE)
  })

  observeEvent(input$undoBtn, {
    proxy <- hot_to_r(input$hot)
    proxy <- hot_undo(proxy)
    output$hot <- renderRHandsontable({
      rhandsontable(proxy) %>%
        hot_context_menu(undo = TRUE, redo = TRUE)
    })
  })

  observeEvent(input$redoBtn, {
    proxy <- hot_to_r(input$hot)
    proxy <- hot_redo(proxy)
    output$hot <- renderRHandsontable({
      rhandsontable(proxy) %>%
        hot_context_menu(undo = TRUE, redo = TRUE)
    })
  })
}

shinyApp(ui, server)

library(shiny)

# Simulated data for demonstration
initial_data <- data.frame(ID = 1:5, Value = c(10, 15, 8, 12, 20))

# Define the Shiny app
ui <- fluidPage(
  titlePanel("Live Updates Example"),
  tableOutput("table")
)

server <- function(input, output, session) {
  # Reactive function to poll for changes in data
  updated_data <- reactivePoll(
    intervalMillis = 1000,  # Poll every 1 second (adjust as needed)
    session = session,
    checkFunc = function() {
      # Check if data has changed (you can customize this condition)
      # For demonstration, let's say data changes if a random number is greater than 0.5
      runif(1) > 0.5
    },
    valueFunc = function() {
      # Simulate updated data
      data.frame(ID = 1:5, Value = sample(1:30, 5))
    }
  )

  # Render the updated table
  output$table <- renderTable({
    updated_data()
  })
}

# Run the app
shinyApp(ui, server)


